'forge clean' running (wd: /Users/wukong/Desktop/audit/2023-12-particle)
'forge build --build-info --force' running
Compiling 97 files with 0.8.23
Solc 0.8.23 finished in 7.00s
Compiler run [32msuccessful![0m

INFO:Detectors:
Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):
	External calls:
	- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)
	- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)
	- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [bytes]) (lib/forge-std/lib/ds-test/src/test.sol#565)
		- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
	- log_named_bytes(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#566)
		- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
	- log_named_bytes(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#567)
		- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
	- log_named_string(Error,err) (lib/forge-std/lib/ds-test/src/test.sol#573)
		- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):
	External calls:
	- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)
	- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)
	- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [bytes]) (lib/forge-std/lib/ds-test/src/test.sol#565)
		- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)
	- log(Error: Calls were not equal) (lib/forge-std/src/StdAssertions.sol#363)
	- log_named_bytes(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#566)
		- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)
	- log_named_bytes(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#567)
		- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)
	- log_named_bytes(  Left call revert data,returnDataA) (lib/forge-std/src/StdAssertions.sol#364)
	- log_named_bytes( Right call return data,returnDataB) (lib/forge-std/src/StdAssertions.sol#365)
	- log_named_string(Error,err) (lib/forge-std/lib/ds-test/src/test.sol#573)
		- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)
Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):
	External calls:
	- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)
	- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)
	- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- fail() (lib/forge-std/src/StdAssertions.sol#366)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: Calls were not equal) (lib/forge-std/src/StdAssertions.sol#370)
	- log_named_bytes(  Left call return data,returnDataA) (lib/forge-std/src/StdAssertions.sol#371)
	- log_named_bytes( Right call revert data,returnDataB) (lib/forge-std/src/StdAssertions.sol#372)
Reentrancy in LiquidityPosition.collectLiquidity(mapping(uint256 => LiquidityPosition.Info),uint256) (contracts/libraries/LiquidityPosition.sol#320-344):
	External calls:
	- (amount0Collected,amount1Collected) = LiquidityPosition.collectLiquidity(tokenId,type()(uint128).max,type()(uint128).max,msg.sender) (contracts/libraries/LiquidityPosition.sol#325-330)
		- (amount0,amount1) = Base.UNI_POSITION_MANAGER.collect(INonfungiblePositionManager.CollectParams(tokenId,recipient,amount0Max,amount1Max)) (contracts/libraries/LiquidityPosition.sol#303-310)
	- TransferHelper.safeTransfer(token0,msg.sender,token0Owed) (contracts/libraries/LiquidityPosition.sol#336)
	- TransferHelper.safeTransfer(token1,msg.sender,token1Owed) (contracts/libraries/LiquidityPosition.sol#340)
	Event emitted after the call(s):
	- CollectLiquidity(msg.sender,token0,token1,amount0Collected,amount1Collected) (contracts/libraries/LiquidityPosition.sol#343)
Reentrancy in LiquidityPosition.decreaseLiquidity(mapping(uint256 => LiquidityPosition.Info),uint256,uint128) (contracts/libraries/LiquidityPosition.sol#273-281):
	External calls:
	- (amount0Decreased,amount1Decreased) = decreaseLiquidity(tokenId,liquidity) (contracts/libraries/LiquidityPosition.sol#279)
		- (amount0,amount1) = Base.UNI_POSITION_MANAGER.decreaseLiquidity(INonfungiblePositionManager.DecreaseLiquidityParams(tokenId,liquidity,0,0,block.timestamp)) (contracts/libraries/LiquidityPosition.sol#254-262)
	Event emitted after the call(s):
	- DecreaseLiquidity(tokenId,liquidity) (contracts/libraries/LiquidityPosition.sol#280)
Reentrancy in stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-109):
	External calls:
	- vm.record() (lib/forge-std/src/StdStorage.sol#43)
	- (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)
	Event emitted after the call(s):
	- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#62)
	- WARNING_UninitedSlot(who,uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#54)
Reentrancy in stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-109):
	External calls:
	- vm.record() (lib/forge-std/src/StdStorage.sol#43)
	- (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)
	- vm.store(who,reads[i],new_val) (lib/forge-std/src/StdStorage.sol#76)
	- vm.store(who,reads[i],prev) (lib/forge-std/src/StdStorage.sol#92)
	Event emitted after the call(s):
	- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#86)
	- WARNING_UninitedSlot(who,uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#69)
Reentrancy in LiquidityPosition.increaseLiquidity(mapping(uint256 => LiquidityPosition.Info),uint256,uint256,uint256) (contracts/libraries/LiquidityPosition.sol#216-239):
	External calls:
	- TransferHelper.safeTransferFrom(token0,msg.sender,address(this),amount0) (contracts/libraries/LiquidityPosition.sol#228)
	- TransferHelper.safeTransferFrom(token1,msg.sender,address(this),amount1) (contracts/libraries/LiquidityPosition.sol#229)
	- (liquidity,amount0Added,amount1Added) = increaseLiquidity(token0,token1,tokenId,amount0,amount1) (contracts/libraries/LiquidityPosition.sol#232)
		- TransferHelper.safeApprove(token0,Base.UNI_POSITION_MANAGER_ADDR,amount0) (contracts/libraries/LiquidityPosition.sol#186)
		- TransferHelper.safeApprove(token1,Base.UNI_POSITION_MANAGER_ADDR,amount1) (contracts/libraries/LiquidityPosition.sol#187)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- (liquidity,amount0Added,amount1Added) = Base.UNI_POSITION_MANAGER.increaseLiquidity(INonfungiblePositionManager.IncreaseLiquidityParams(tokenId,amount0,amount1,0,0,block.timestamp)) (contracts/libraries/LiquidityPosition.sol#190-199)
		- TransferHelper.safeApprove(token0,Base.UNI_POSITION_MANAGER_ADDR,0) (contracts/libraries/LiquidityPosition.sol#202)
		- TransferHelper.safeApprove(token1,Base.UNI_POSITION_MANAGER_ADDR,0) (contracts/libraries/LiquidityPosition.sol#203)
	- Base.refund(msg.sender,token0,amount0,amount0Added) (contracts/libraries/LiquidityPosition.sol#235)
	- Base.refund(msg.sender,token1,amount1,amount1Added) (contracts/libraries/LiquidityPosition.sol#236)
	Event emitted after the call(s):
	- IncreaseLiquidity(tokenId,liquidity) (contracts/libraries/LiquidityPosition.sol#238)
Reentrancy in LiquidityPosition.mint(mapping(uint256 => LiquidityPosition.Info),DataStruct.MintParams) (contracts/libraries/LiquidityPosition.sol#119-160):
	External calls:
	- TransferHelper.safeTransferFrom(params.token0,msg.sender,address(this),params.amount0ToMint) (contracts/libraries/LiquidityPosition.sol#124)
	- TransferHelper.safeTransferFrom(params.token1,msg.sender,address(this),params.amount1ToMint) (contracts/libraries/LiquidityPosition.sol#125)
	- TransferHelper.safeApprove(params.token0,Base.UNI_POSITION_MANAGER_ADDR,params.amount0ToMint) (contracts/libraries/LiquidityPosition.sol#128)
	- TransferHelper.safeApprove(params.token1,Base.UNI_POSITION_MANAGER_ADDR,params.amount1ToMint) (contracts/libraries/LiquidityPosition.sol#129)
	- (tokenId,liquidity,amount0Minted,amount1Minted) = Base.UNI_POSITION_MANAGER.mint(INonfungiblePositionManager.MintParams(params.token0,params.token1,params.fee,params.tickLower,params.tickUpper,params.amount0ToMint,params.amount1ToMint,params.amount0Min,params.amount1Min,address(this),block.timestamp)) (contracts/libraries/LiquidityPosition.sol#132-146)
	- TransferHelper.safeApprove(params.token0,Base.UNI_POSITION_MANAGER_ADDR,0) (contracts/libraries/LiquidityPosition.sol#152)
	- TransferHelper.safeApprove(params.token1,Base.UNI_POSITION_MANAGER_ADDR,0) (contracts/libraries/LiquidityPosition.sol#153)
	- Base.refund(msg.sender,params.token0,params.amount0ToMint,amount0Minted) (contracts/libraries/LiquidityPosition.sol#156)
	- Base.refund(msg.sender,params.token1,params.amount1ToMint,amount1Minted) (contracts/libraries/LiquidityPosition.sol#157)
	Event emitted after the call(s):
	- SupplyLiquidity(tokenId,msg.sender,liquidity) (contracts/libraries/LiquidityPosition.sol#159)
Reentrancy in stdStorageSafe.parent(StdStorage) (lib/forge-std/src/StdStorage.sol#175-187):
	External calls:
	- vm.startMappingRecording() (lib/forge-std/src/StdStorage.sol#178)
	- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#179)
		- vm.record() (lib/forge-std/src/StdStorage.sol#43)
		- (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)
		- vm.store(who,reads[i],new_val) (lib/forge-std/src/StdStorage.sol#76)
		- vm.store(who,reads[i],prev) (lib/forge-std/src/StdStorage.sol#89)
		- vm.store(who,reads[i],prev) (lib/forge-std/src/StdStorage.sol#92)
	Event emitted after the call(s):
	- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#62)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#179)
	- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#86)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#179)
	- WARNING_UninitedSlot(who,uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#54)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#179)
	- WARNING_UninitedSlot(who,uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#69)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#179)
Reentrancy in stdStorageSafe.root(StdStorage) (lib/forge-std/src/StdStorage.sol#189-208):
	External calls:
	- vm.startMappingRecording() (lib/forge-std/src/StdStorage.sol#192)
	- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#193)
		- vm.record() (lib/forge-std/src/StdStorage.sol#43)
		- (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)
		- vm.store(who,reads[i],new_val) (lib/forge-std/src/StdStorage.sol#76)
		- vm.store(who,reads[i],prev) (lib/forge-std/src/StdStorage.sol#89)
		- vm.store(who,reads[i],prev) (lib/forge-std/src/StdStorage.sol#92)
	Event emitted after the call(s):
	- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#62)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#193)
	- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#86)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#193)
	- WARNING_UninitedSlot(who,uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#54)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#193)
	- WARNING_UninitedSlot(who,uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#69)
		- child = find(self) - field_depth (lib/forge-std/src/StdStorage.sol#193)
Reentrancy in DeployParticleInfoReader.run() (script/DeployInfoReader.s.sol#15-26):
	External calls:
	- vm.startBroadcast(deployerPrivateKey) (script/DeployInfoReader.s.sol#17)
	- proxy = new ERC1967Proxy(address(infoReaderImpl),) (script/DeployInfoReader.s.sol#20)
	- infoReader.initialize(PARTICLE_POSITION_MANAGER) (script/DeployInfoReader.s.sol#22)
	Event emitted after the call(s):
	- Deployed(address(infoReader)) (script/DeployInfoReader.s.sol#23)
Reentrancy in DeployParticlePositionManager.run() (script/DeployPositionManager.s.sol#21-32):
	External calls:
	- vm.startBroadcast(deployerPrivateKey) (script/DeployPositionManager.s.sol#23)
	- proxy = new ERC1967Proxy(address(positionManagerImpl),) (script/DeployPositionManager.s.sol#26)
	- positionManager.initialize(DEX_AGGREGATOR,FEE_FACTOR,LIQUIDATION_REWARD_FACTOR,LOAN_TERM,TREASURY_RATE) (script/DeployPositionManager.s.sol#28)
	Event emitted after the call(s):
	- Deployed(address(positionManager)) (script/DeployPositionManager.s.sol#29)
Reentrancy in AdminTest.testAdminCanUpdateDexAggregator() (test/Admin.t.sol#10-15):
	External calls:
	- vm.startPrank(ADMIN) (test/Admin.t.sol#11)
	- particlePositionManager.updateDexAggregator(_ONE_INCH_AGGREGATOR) (test/Admin.t.sol#12)
	- assertEq(particlePositionManager.DEX_AGGREGATOR(),_ONE_INCH_AGGREGATOR) (test/Admin.t.sol#13)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(particlePositionManager.DEX_AGGREGATOR(),_ONE_INCH_AGGREGATOR) (test/Admin.t.sol#13)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(particlePositionManager.DEX_AGGREGATOR(),_ONE_INCH_AGGREGATOR) (test/Admin.t.sol#13)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(particlePositionManager.DEX_AGGREGATOR(),_ONE_INCH_AGGREGATOR) (test/Admin.t.sol#13)
Reentrancy in AdminTest.testAdminCanUpdateFeeFactor() (test/Admin.t.sol#45-50):
	External calls:
	- vm.startPrank(ADMIN) (test/Admin.t.sol#46)
	- particlePositionManager.updateFeeFactor(4) (test/Admin.t.sol#47)
	- assertEq(particlePositionManager.FEE_FACTOR(),4) (test/Admin.t.sol#48)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(particlePositionManager.FEE_FACTOR(),4) (test/Admin.t.sol#48)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(particlePositionManager.FEE_FACTOR(),4) (test/Admin.t.sol#48)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(particlePositionManager.FEE_FACTOR(),4) (test/Admin.t.sol#48)
Reentrancy in AdminTest.testAdminCanUpdateInfoReader() (test/Admin.t.sol#115-120):
	External calls:
	- vm.startPrank(ADMIN) (test/Admin.t.sol#116)
	- particleInfoReader.updateParticleAddress(address(0x42)) (test/Admin.t.sol#117)
	- assertEq(particleInfoReader.PARTICLE_POSITION_MANAGER_ADDR(),address(0x42)) (test/Admin.t.sol#118)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(particleInfoReader.PARTICLE_POSITION_MANAGER_ADDR(),address(0x42)) (test/Admin.t.sol#118)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(particleInfoReader.PARTICLE_POSITION_MANAGER_ADDR(),address(0x42)) (test/Admin.t.sol#118)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(particleInfoReader.PARTICLE_POSITION_MANAGER_ADDR(),address(0x42)) (test/Admin.t.sol#118)
Reentrancy in AdminTest.testAdminCanUpdateLiquidationRewardFactor() (test/Admin.t.sol#24-29):
	External calls:
	- vm.startPrank(ADMIN) (test/Admin.t.sol#25)
	- particlePositionManager.updateLiquidationRewardFactor(888) (test/Admin.t.sol#26)
	- assertEq(particlePositionManager.LIQUIDATION_REWARD_FACTOR(),888) (test/Admin.t.sol#27)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(particlePositionManager.LIQUIDATION_REWARD_FACTOR(),888) (test/Admin.t.sol#27)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(particlePositionManager.LIQUIDATION_REWARD_FACTOR(),888) (test/Admin.t.sol#27)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(particlePositionManager.LIQUIDATION_REWARD_FACTOR(),888) (test/Admin.t.sol#27)
Reentrancy in AdminTest.testAdminCanUpdateLoanTerm() (test/Admin.t.sol#66-71):
	External calls:
	- vm.startPrank(ADMIN) (test/Admin.t.sol#67)
	- particlePositionManager.updateLoanTerm(691200) (test/Admin.t.sol#68)
	- assertEq(particlePositionManager.LOAN_TERM(),691200) (test/Admin.t.sol#69)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(particlePositionManager.LOAN_TERM(),691200) (test/Admin.t.sol#69)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(particlePositionManager.LOAN_TERM(),691200) (test/Admin.t.sol#69)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(particlePositionManager.LOAN_TERM(),691200) (test/Admin.t.sol#69)
Reentrancy in OpenPositionTest.testBaseOpenLongPosition() (test/OpenPosition.t.sol#117-143):
	External calls:
	- amountNeeded = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredEth - amount1ToBorrow,0) (test/OpenPosition.t.sol#126-132)
	- _borrowToLong(SWAPPER,address(USDC),_tokenId,amountIn,amount0ToBorrow,borrowerLiquidity) (test/OpenPosition.t.sol#136)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- assertEq(usdcSwapperBalanceAfter,0) (test/OpenPosition.t.sol#141)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(usdcSwapperBalanceAfter,0) (test/OpenPosition.t.sol#141)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(usdcSwapperBalanceAfter,0) (test/OpenPosition.t.sol#141)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(usdcSwapperBalanceAfter,0) (test/OpenPosition.t.sol#141)
Reentrancy in OpenPositionTest.testBaseOpenLongPosition() (test/OpenPosition.t.sol#117-143):
	External calls:
	- amountNeeded = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredEth - amount1ToBorrow,0) (test/OpenPosition.t.sol#126-132)
	- _borrowToLong(SWAPPER,address(USDC),_tokenId,amountIn,amount0ToBorrow,borrowerLiquidity) (test/OpenPosition.t.sol#136)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- assertEq(usdcSwapperBalanceAfter,0) (test/OpenPosition.t.sol#141)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#142)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#142)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#142)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#142)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#142)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#142)
Reentrancy in OpenPositionTest.testBaseOpenLongPositionOutOfRange() (test/OpenPosition.t.sol#377-380):
	External calls:
	- _setupUpperOutOfRange() (test/OpenPosition.t.sol#378)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountNeeded = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredEth - amount1ToBorrow,0) (test/OpenPosition.t.sol#126-132)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- testBaseOpenLongPosition() (test/OpenPosition.t.sol#379)
Reentrancy in OpenPositionTest.testBaseOpenShortPosition() (test/OpenPosition.t.sol#145-171):
	External calls:
	- amountNeeded = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredUsdc - amount0ToBorrow,0) (test/OpenPosition.t.sol#154-160)
	- _borrowToShort(SWAPPER,address(WETH),_tokenId,amountIn,amount1ToBorrow,borrowerLiquidity) (test/OpenPosition.t.sol#164)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- assertEq(wethSwapperBalanceAfter,0) (test/OpenPosition.t.sol#169)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(wethSwapperBalanceAfter,0) (test/OpenPosition.t.sol#169)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(wethSwapperBalanceAfter,0) (test/OpenPosition.t.sol#169)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(wethSwapperBalanceAfter,0) (test/OpenPosition.t.sol#169)
Reentrancy in OpenPositionTest.testBaseOpenShortPosition() (test/OpenPosition.t.sol#145-171):
	External calls:
	- amountNeeded = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredUsdc - amount0ToBorrow,0) (test/OpenPosition.t.sol#154-160)
	- _borrowToShort(SWAPPER,address(WETH),_tokenId,amountIn,amount1ToBorrow,borrowerLiquidity) (test/OpenPosition.t.sol#164)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- assertEq(wethSwapperBalanceAfter,0) (test/OpenPosition.t.sol#169)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#170)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#170)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#170)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#170)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#170)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,eps) (test/OpenPosition.t.sol#170)
Reentrancy in OpenPositionTest.testBaseOpenShortPositionOutOfRange() (test/OpenPosition.t.sol#392-395):
	External calls:
	- _setupLowerOutOfRange() (test/OpenPosition.t.sol#393)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountNeeded = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredUsdc - amount0ToBorrow,0) (test/OpenPosition.t.sol#154-160)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- testBaseOpenShortPosition() (test/OpenPosition.t.sol#394)
Reentrancy in ClosePositionTest.testBorrowToLongAdminCanWithdrawTreasury() (test/ClosePosition.t.sol#893-902):
	External calls:
	- _openLongPosition() (test/ClosePosition.t.sol#894)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/ClosePosition.t.sol#122-128)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _closeLongPosition(0,true,true) (test/ClosePosition.t.sol#895)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#221)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#222-230)
		- vm.stopPrank() (test/ClosePosition.t.sol#231)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,amount0ToReturn,0) (test/ClosePosition.t.sol#193)
	- vm.startPrank(ADMIN) (test/ClosePosition.t.sol#897)
	- particlePositionManager.withdrawTreasury(address(USDC),ADMIN) (test/ClosePosition.t.sol#898)
	- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#899)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#899)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#899)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#899)
Reentrancy in ClosePositionTest.testBorrowToLongAdminCanWithdrawTreasury() (test/ClosePosition.t.sol#893-902):
	External calls:
	- _openLongPosition() (test/ClosePosition.t.sol#894)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/ClosePosition.t.sol#122-128)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _closeLongPosition(0,true,true) (test/ClosePosition.t.sol#895)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#221)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#222-230)
		- vm.stopPrank() (test/ClosePosition.t.sol#231)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,amount0ToReturn,0) (test/ClosePosition.t.sol#193)
	- vm.startPrank(ADMIN) (test/ClosePosition.t.sol#897)
	- particlePositionManager.withdrawTreasury(address(USDC),ADMIN) (test/ClosePosition.t.sol#898)
	- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#899)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(fee,0) (test/ClosePosition.t.sol#900)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(fee,0) (test/ClosePosition.t.sol#900)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(fee,0) (test/ClosePosition.t.sol#900)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(fee,0) (test/ClosePosition.t.sol#900)
Reentrancy in ClosePositionTest.testBorrowToShortAdminCanWithdrawTreasury() (test/ClosePosition.t.sol#904-913):
	External calls:
	- _openShortPosition() (test/ClosePosition.t.sol#905)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredCollateral - amount0ToBorrow,0) (test/ClosePosition.t.sol#153-159)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- _closeShortPosition(0,true,true) (test/ClosePosition.t.sol#906)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#287)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount0ToReturn,amount1ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#288-296)
		- vm.stopPrank() (test/ClosePosition.t.sol#297)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,amount1ToReturn,0) (test/ClosePosition.t.sol#259)
	- vm.startPrank(ADMIN) (test/ClosePosition.t.sol#908)
	- particlePositionManager.withdrawTreasury(address(WETH),ADMIN) (test/ClosePosition.t.sol#909)
	- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#910)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#910)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#910)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#910)
Reentrancy in ClosePositionTest.testBorrowToShortAdminCanWithdrawTreasury() (test/ClosePosition.t.sol#904-913):
	External calls:
	- _openShortPosition() (test/ClosePosition.t.sol#905)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredCollateral - amount0ToBorrow,0) (test/ClosePosition.t.sol#153-159)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- _closeShortPosition(0,true,true) (test/ClosePosition.t.sol#906)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#287)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount0ToReturn,amount1ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#288-296)
		- vm.stopPrank() (test/ClosePosition.t.sol#297)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,amount1ToReturn,0) (test/ClosePosition.t.sol#259)
	- vm.startPrank(ADMIN) (test/ClosePosition.t.sol#908)
	- particlePositionManager.withdrawTreasury(address(WETH),ADMIN) (test/ClosePosition.t.sol#909)
	- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/ClosePosition.t.sol#910)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(fee,0) (test/ClosePosition.t.sol#911)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(fee,0) (test/ClosePosition.t.sol#911)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(fee,0) (test/ClosePosition.t.sol#911)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(fee,0) (test/ClosePosition.t.sol#911)
Reentrancy in LiquidationTest.testCanAddPremiumAfterOpeningPosition() (test/LiquidatePosition.t.sol#255-280):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#256)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#258)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#209)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log_named_decimal_uint( Max % Delta,maxPercentDelta * 100,18) (lib/forge-std/src/StdAssertions.sol#212)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log_named_decimal_uint(     % Delta,percentDelta * 100,18) (lib/forge-std/src/StdAssertions.sol#213)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log_named_uint(        Left,a) (lib/forge-std/src/StdAssertions.sol#210)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
	- log_named_uint(       Right,b) (lib/forge-std/src/StdAssertions.sol#211)
		- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
Reentrancy in LiquidationTest.testCanAddPremiumAfterOpeningPosition() (test/LiquidatePosition.t.sol#255-280):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#256)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#258)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- assertApproxEqRel(token0PremiumBefore + PREMIUM_0,token0Premium,0.001e18) (test/LiquidatePosition.t.sol#278)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#209)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log_named_decimal_uint( Max % Delta,maxPercentDelta * 100,18) (lib/forge-std/src/StdAssertions.sol#212)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log_named_decimal_uint(     % Delta,percentDelta * 100,18) (lib/forge-std/src/StdAssertions.sol#213)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log_named_uint(        Left,a) (lib/forge-std/src/StdAssertions.sol#210)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
	- log_named_uint(       Right,b) (lib/forge-std/src/StdAssertions.sol#211)
		- assertApproxEqRel(token1PremiumBefore + PREMIUM_1,token1Premium,0.001e18) (test/LiquidatePosition.t.sol#279)
Reentrancy in LiquidationTest.testCanLiquidateZeroPremiumGetReward() (test/LiquidatePosition.t.sol#312-324):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#313)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#317)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
Reentrancy in LiquidationTest.testCanLiquidateZeroPremiumGetReward() (test/LiquidatePosition.t.sol#312-324):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#313)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#317)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(token1Premium,0) (test/LiquidatePosition.t.sol#320)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(token1Premium,0) (test/LiquidatePosition.t.sol#320)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(token1Premium,0) (test/LiquidatePosition.t.sol#320)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(token1Premium,0) (test/LiquidatePosition.t.sol#320)
Reentrancy in LiquidationTest.testCanLiquidateZeroPremiumGetReward() (test/LiquidatePosition.t.sol#312-324):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#313)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#317)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(token1Premium,0) (test/LiquidatePosition.t.sol#320)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token0OwedBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#321)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token0OwedBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#321)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token0OwedBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#321)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token0OwedBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#321)
Reentrancy in LiquidationTest.testCanLiquidateZeroPremiumGetReward() (test/LiquidatePosition.t.sol#312-324):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#313)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#317)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0Premium,0) (test/LiquidatePosition.t.sol#319)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(token1Premium,0) (test/LiquidatePosition.t.sol#320)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token0OwedBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#321)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(ethBefore + (token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT,WETH.balanceOf(LIQUIDATOR)) (test/LiquidatePosition.t.sol#323)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(ethBefore + (token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT,WETH.balanceOf(LIQUIDATOR)) (test/LiquidatePosition.t.sol#323)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(ethBefore + (token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT,WETH.balanceOf(LIQUIDATOR)) (test/LiquidatePosition.t.sol#323)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(ethBefore + (token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT,WETH.balanceOf(LIQUIDATOR)) (test/LiquidatePosition.t.sol#323)
Reentrancy in OpenPositionTest.testDirectLongAdminCanWithdrawTreasury() (test/OpenPosition.t.sol#526-534):
	External calls:
	- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#527)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwapped = QUOTER.quoteExactInputSingle(address(USDC),address(WETH),FEE,amount0ToBorrow,0) (test/OpenPosition.t.sol#337)
		- vm.startPrank(WHALE) (test/Base.t.sol#252)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#253)
		- IERC20(token0).transfer(swapper,feeFrom) (test/Base.t.sol#254)
		- vm.stopPrank() (test/Base.t.sol#255)
		- vm.startPrank(swapper) (test/Base.t.sol#257)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#258)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),feeFrom) (test/Base.t.sol#259)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#260-273)
		- vm.stopPrank() (test/Base.t.sol#274)
	- vm.startPrank(ADMIN) (test/OpenPosition.t.sol#529)
	- particlePositionManager.withdrawTreasury(address(USDC),ADMIN) (test/OpenPosition.t.sol#530)
	- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#531)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#531)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#531)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#531)
Reentrancy in OpenPositionTest.testDirectLongAdminCanWithdrawTreasury() (test/OpenPosition.t.sol#526-534):
	External calls:
	- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#527)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwapped = QUOTER.quoteExactInputSingle(address(USDC),address(WETH),FEE,amount0ToBorrow,0) (test/OpenPosition.t.sol#337)
		- vm.startPrank(WHALE) (test/Base.t.sol#252)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#253)
		- IERC20(token0).transfer(swapper,feeFrom) (test/Base.t.sol#254)
		- vm.stopPrank() (test/Base.t.sol#255)
		- vm.startPrank(swapper) (test/Base.t.sol#257)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#258)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),feeFrom) (test/Base.t.sol#259)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#260-273)
		- vm.stopPrank() (test/Base.t.sol#274)
	- vm.startPrank(ADMIN) (test/OpenPosition.t.sol#529)
	- particlePositionManager.withdrawTreasury(address(USDC),ADMIN) (test/OpenPosition.t.sol#530)
	- assertEq(USDC.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#531)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(fee,0) (test/OpenPosition.t.sol#532)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(fee,0) (test/OpenPosition.t.sol#532)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(fee,0) (test/OpenPosition.t.sol#532)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(fee,0) (test/OpenPosition.t.sol#532)
Reentrancy in OpenPositionTest.testDirectShortAdminCanWithdrawTreasury() (test/OpenPosition.t.sol#536-544):
	External calls:
	- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#537)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwapped = QUOTER.quoteExactInputSingle(address(WETH),address(USDC),FEE,amount1ToBorrow,0) (test/OpenPosition.t.sol#361)
		- vm.startPrank(WHALE) (test/Base.t.sol#359)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#360)
		- IERC20(token1).transfer(swapper,feeFrom) (test/Base.t.sol#361)
		- vm.stopPrank() (test/Base.t.sol#362)
		- vm.startPrank(swapper) (test/Base.t.sol#364)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#365)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),feeFrom) (test/Base.t.sol#366)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#367-380)
		- vm.stopPrank() (test/Base.t.sol#381)
	- vm.startPrank(ADMIN) (test/OpenPosition.t.sol#539)
	- particlePositionManager.withdrawTreasury(address(WETH),ADMIN) (test/OpenPosition.t.sol#540)
	- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#541)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#541)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#541)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#541)
Reentrancy in OpenPositionTest.testDirectShortAdminCanWithdrawTreasury() (test/OpenPosition.t.sol#536-544):
	External calls:
	- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#537)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwapped = QUOTER.quoteExactInputSingle(address(WETH),address(USDC),FEE,amount1ToBorrow,0) (test/OpenPosition.t.sol#361)
		- vm.startPrank(WHALE) (test/Base.t.sol#359)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#360)
		- IERC20(token1).transfer(swapper,feeFrom) (test/Base.t.sol#361)
		- vm.stopPrank() (test/Base.t.sol#362)
		- vm.startPrank(swapper) (test/Base.t.sol#364)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#365)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),feeFrom) (test/Base.t.sol#366)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#367-380)
		- vm.stopPrank() (test/Base.t.sol#381)
	- vm.startPrank(ADMIN) (test/OpenPosition.t.sol#539)
	- particlePositionManager.withdrawTreasury(address(WETH),ADMIN) (test/OpenPosition.t.sol#540)
	- assertEq(WETH.balanceOf(address(ADMIN)),(fee * TREASURY_RATE) / BASIS_POINT) (test/OpenPosition.t.sol#541)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(fee,0) (test/OpenPosition.t.sol#542)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(fee,0) (test/OpenPosition.t.sol#542)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(fee,0) (test/OpenPosition.t.sol#542)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(fee,0) (test/OpenPosition.t.sol#542)
Reentrancy in IncreaseLiquidityTest.testIncreaseLiquidity() (test/IncreaseLiquidity.t.sol#40-63):
	External calls:
	- vm.startPrank(WHALE) (test/IncreaseLiquidity.t.sol#43)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/IncreaseLiquidity.t.sol#44)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/IncreaseLiquidity.t.sol#45)
	- vm.stopPrank() (test/IncreaseLiquidity.t.sol#46)
	- vm.startPrank(LP) (test/IncreaseLiquidity.t.sol#48)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/IncreaseLiquidity.t.sol#49)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/IncreaseLiquidity.t.sol#50)
	- (liquidityAdded) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/IncreaseLiquidity.t.sol#52-56)
	- assertEq(liquidityAfter,liquidityBefore + liquidityAdded) (test/IncreaseLiquidity.t.sol#60)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(liquidityAfter,liquidityBefore + liquidityAdded) (test/IncreaseLiquidity.t.sol#60)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(liquidityAfter,liquidityBefore + liquidityAdded) (test/IncreaseLiquidity.t.sol#60)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(liquidityAfter,liquidityBefore + liquidityAdded) (test/IncreaseLiquidity.t.sol#60)
Reentrancy in LiquidationTest.testLiquidationOwedAmount() (test/LiquidatePosition.t.sol#405-455):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#416)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#419)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- vm.warp(block.timestamp + 1) (test/LiquidatePosition.t.sol#420)
	- _renewalCutoff() (test/LiquidatePosition.t.sol#421)
		- vm.startPrank(LP) (test/LiquidatePosition.t.sol#250)
		- particlePositionManager.reclaimLiquidity(_tokenId) (test/LiquidatePosition.t.sol#251)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#252)
	- vm.warp(block.timestamp + 604800) (test/LiquidatePosition.t.sol#422)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#426)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
Reentrancy in LiquidationTest.testLiquidationOwedAmount() (test/LiquidatePosition.t.sol#405-455):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#416)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#419)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- vm.warp(block.timestamp + 1) (test/LiquidatePosition.t.sol#420)
	- _renewalCutoff() (test/LiquidatePosition.t.sol#421)
		- vm.startPrank(LP) (test/LiquidatePosition.t.sol#250)
		- particlePositionManager.reclaimLiquidity(_tokenId) (test/LiquidatePosition.t.sol#251)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#252)
	- vm.warp(block.timestamp + 604800) (test/LiquidatePosition.t.sol#422)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#426)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token1OwedBefore + token1Owed,token1OwedAfter) (test/LiquidatePosition.t.sol#446)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token1OwedBefore + token1Owed,token1OwedAfter) (test/LiquidatePosition.t.sol#446)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token1OwedBefore + token1Owed,token1OwedAfter) (test/LiquidatePosition.t.sol#446)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token1OwedBefore + token1Owed,token1OwedAfter) (test/LiquidatePosition.t.sol#446)
Reentrancy in LiquidationTest.testLiquidationOwedAmount() (test/LiquidatePosition.t.sol#405-455):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#416)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#419)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- vm.warp(block.timestamp + 1) (test/LiquidatePosition.t.sol#420)
	- _renewalCutoff() (test/LiquidatePosition.t.sol#421)
		- vm.startPrank(LP) (test/LiquidatePosition.t.sol#250)
		- particlePositionManager.reclaimLiquidity(_tokenId) (test/LiquidatePosition.t.sol#251)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#252)
	- vm.warp(block.timestamp + 604800) (test/LiquidatePosition.t.sol#422)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#426)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token1OwedBefore + token1Owed,token1OwedAfter) (test/LiquidatePosition.t.sol#446)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- vm.startPrank(LP) (test/LiquidatePosition.t.sol#448)
	- particlePositionManager.collectLiquidity(_tokenId) (test/LiquidatePosition.t.sol#451)
	- assertGe(USDC.balanceOf(LP) - lpUsdcBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#452)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(USDC.balanceOf(LP) - lpUsdcBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#452)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(USDC.balanceOf(LP) - lpUsdcBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#452)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(USDC.balanceOf(LP) - lpUsdcBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#452)
Reentrancy in LiquidationTest.testLiquidationOwedAmount() (test/LiquidatePosition.t.sol#405-455):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#416)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#419)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- vm.warp(block.timestamp + 1) (test/LiquidatePosition.t.sol#420)
	- _renewalCutoff() (test/LiquidatePosition.t.sol#421)
		- vm.startPrank(LP) (test/LiquidatePosition.t.sol#250)
		- particlePositionManager.reclaimLiquidity(_tokenId) (test/LiquidatePosition.t.sol#251)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#252)
	- vm.warp(block.timestamp + 604800) (test/LiquidatePosition.t.sol#422)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#426)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(token0OwedBefore + token0Owed,token0OwedAfter) (test/LiquidatePosition.t.sol#445)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token1OwedBefore + token1Owed,token1OwedAfter) (test/LiquidatePosition.t.sol#446)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- vm.startPrank(LP) (test/LiquidatePosition.t.sol#448)
	- particlePositionManager.collectLiquidity(_tokenId) (test/LiquidatePosition.t.sol#451)
	- assertGe(USDC.balanceOf(LP) - lpUsdcBefore,token0OwedAfter) (test/LiquidatePosition.t.sol#452)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGe(WETH.balanceOf(LP) - lpWethBefore,token1OwedAfter) (test/LiquidatePosition.t.sol#453)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(WETH.balanceOf(LP) - lpWethBefore,token1OwedAfter) (test/LiquidatePosition.t.sol#453)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(WETH.balanceOf(LP) - lpWethBefore,token1OwedAfter) (test/LiquidatePosition.t.sol#453)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(WETH.balanceOf(LP) - lpWethBefore,token1OwedAfter) (test/LiquidatePosition.t.sol#453)
Reentrancy in LiquidationTest.testLiquidationRewardAmount() (test/LiquidatePosition.t.sol#389-403):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#390)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#391)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- vm.warp(block.timestamp + 1) (test/LiquidatePosition.t.sol#392)
	- _renewalCutoff() (test/LiquidatePosition.t.sol#393)
		- vm.startPrank(LP) (test/LiquidatePosition.t.sol#250)
		- particlePositionManager.reclaimLiquidity(_tokenId) (test/LiquidatePosition.t.sol#251)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#252)
	- vm.warp(block.timestamp + 604800) (test/LiquidatePosition.t.sol#394)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#400)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(USDC.balanceOf(LIQUIDATOR) - usdcBefore,(token0Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#401)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(USDC.balanceOf(LIQUIDATOR) - usdcBefore,(token0Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#401)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(USDC.balanceOf(LIQUIDATOR) - usdcBefore,(token0Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#401)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(USDC.balanceOf(LIQUIDATOR) - usdcBefore,(token0Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#401)
Reentrancy in LiquidationTest.testLiquidationRewardAmount() (test/LiquidatePosition.t.sol#389-403):
	External calls:
	- _openLongPosition() (test/LiquidatePosition.t.sol#390)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/LiquidatePosition.t.sol#80-86)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _addPremium(PREMIUM_0,PREMIUM_1) (test/LiquidatePosition.t.sol#391)
		- vm.startPrank(WHALE) (test/LiquidatePosition.t.sol#237)
		- USDC.transfer(SWAPPER,premium0) (test/LiquidatePosition.t.sol#238)
		- WETH.transfer(SWAPPER,premium1) (test/LiquidatePosition.t.sol#239)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#240)
		- vm.startPrank(SWAPPER) (test/LiquidatePosition.t.sol#242)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),premium0) (test/LiquidatePosition.t.sol#243)
		- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),premium1) (test/LiquidatePosition.t.sol#244)
		- particlePositionManager.addPremium(LIEN_ID,premium0,premium1) (test/LiquidatePosition.t.sol#245)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#246)
	- vm.warp(block.timestamp + 1) (test/LiquidatePosition.t.sol#392)
	- _renewalCutoff() (test/LiquidatePosition.t.sol#393)
		- vm.startPrank(LP) (test/LiquidatePosition.t.sol#250)
		- particlePositionManager.reclaimLiquidity(_tokenId) (test/LiquidatePosition.t.sol#251)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#252)
	- vm.warp(block.timestamp + 604800) (test/LiquidatePosition.t.sol#394)
	- _liquidateLongPosition(LIEN_ID) (test/LiquidatePosition.t.sol#400)
		- vm.startPrank(LIQUIDATOR) (test/LiquidatePosition.t.sol#201)
		- particlePositionManager.liquidatePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data),SWAPPER) (test/LiquidatePosition.t.sol#202-211)
		- vm.stopPrank() (test/LiquidatePosition.t.sol#212)
	- assertEq(USDC.balanceOf(LIQUIDATOR) - usdcBefore,(token0Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#401)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(WETH.balanceOf(LIQUIDATOR) - wethBefore,(token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#402)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(WETH.balanceOf(LIQUIDATOR) - wethBefore,(token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#402)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(WETH.balanceOf(LIQUIDATOR) - wethBefore,(token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#402)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(WETH.balanceOf(LIQUIDATOR) - wethBefore,(token1Premium * LIQUIDATION_REWARD_FACTOR) / BASIS_POINT) (test/LiquidatePosition.t.sol#402)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#55-81):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#57)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#62-65)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#66)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#55-81):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#57)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#62-65)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#66)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#55-81):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#57)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#62-65)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#66)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#55-81):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#57)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#62-65)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#66)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#75)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#75)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#75)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#75)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#55-81):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#57)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#62-65)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#66)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#75)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#55-81):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#57)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#62-65)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#66)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#72)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#74)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#75)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(_amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#77)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(_amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#78)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(_amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#78)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(_amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#78)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(_amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#78)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(_amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#78)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(_amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#78)
Reentrancy in DecreaseLiquidityTest.testMintDecreaseHalfLiquidity() (test/DecreaseLiquidity.t.sol#42-53):
	External calls:
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#45)
	- particlePositionManager.decreaseLiquidity(_tokenId,liquidityToDecrease) (test/DecreaseLiquidity.t.sol#46)
	- assertEq(liquidityAfter + liquidityToDecrease,liquidityBefore) (test/DecreaseLiquidity.t.sol#50)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(liquidityAfter + liquidityToDecrease,liquidityBefore) (test/DecreaseLiquidity.t.sol#50)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(liquidityAfter + liquidityToDecrease,liquidityBefore) (test/DecreaseLiquidity.t.sol#50)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(liquidityAfter + liquidityToDecrease,liquidityBefore) (test/DecreaseLiquidity.t.sol#50)
Reentrancy in MintTest.testMintInRange() (test/Mint.t.sol#17-44):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#24-33)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#39)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,LP) (test/Mint.t.sol#39)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,LP) (test/Mint.t.sol#39)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,LP) (test/Mint.t.sol#39)
Reentrancy in MintTest.testMintInRange() (test/Mint.t.sol#17-44):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#24-33)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#39)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#40)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#40)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#40)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#40)
Reentrancy in MintTest.testMintInRange() (test/Mint.t.sol#17-44):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#24-33)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#39)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#40)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#42)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#42)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#42)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#42)
Reentrancy in MintTest.testMintInRange() (test/Mint.t.sol#17-44):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#24-33)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#39)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#40)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#42)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#43)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#43)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#43)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#43)
Reentrancy in DecreaseLiquidityTest.testMintIncreaseDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#83-121):
	External calls:
	- vm.startPrank(WHALE) (test/DecreaseLiquidity.t.sol#84)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#85)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#86)
	- vm.stopPrank() (test/DecreaseLiquidity.t.sol#87)
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#89)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#90)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#91)
	- (amount0Added,amount1Added) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#93-97)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#104-107)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#108)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
Reentrancy in DecreaseLiquidityTest.testMintIncreaseDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#83-121):
	External calls:
	- vm.startPrank(WHALE) (test/DecreaseLiquidity.t.sol#84)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#85)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#86)
	- vm.stopPrank() (test/DecreaseLiquidity.t.sol#87)
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#89)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#90)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#91)
	- (amount0Added,amount1Added) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#93-97)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#104-107)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#108)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
Reentrancy in DecreaseLiquidityTest.testMintIncreaseDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#83-121):
	External calls:
	- vm.startPrank(WHALE) (test/DecreaseLiquidity.t.sol#84)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#85)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#86)
	- vm.stopPrank() (test/DecreaseLiquidity.t.sol#87)
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#89)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#90)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#91)
	- (amount0Added,amount1Added) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#93-97)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#104-107)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#108)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
Reentrancy in DecreaseLiquidityTest.testMintIncreaseDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#83-121):
	External calls:
	- vm.startPrank(WHALE) (test/DecreaseLiquidity.t.sol#84)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#85)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#86)
	- vm.stopPrank() (test/DecreaseLiquidity.t.sol#87)
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#89)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#90)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#91)
	- (amount0Added,amount1Added) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#93-97)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#104-107)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#108)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#117)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#117)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#117)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#117)
Reentrancy in DecreaseLiquidityTest.testMintIncreaseDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#83-121):
	External calls:
	- vm.startPrank(WHALE) (test/DecreaseLiquidity.t.sol#84)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#85)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#86)
	- vm.stopPrank() (test/DecreaseLiquidity.t.sol#87)
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#89)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#90)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#91)
	- (amount0Added,amount1Added) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#93-97)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#104-107)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#108)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#117)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
Reentrancy in DecreaseLiquidityTest.testMintIncreaseDecreaseAllLiquidity() (test/DecreaseLiquidity.t.sol#83-121):
	External calls:
	- vm.startPrank(WHALE) (test/DecreaseLiquidity.t.sol#84)
	- USDC.transfer(LP,INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#85)
	- WETH.transfer(LP,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#86)
	- vm.stopPrank() (test/DecreaseLiquidity.t.sol#87)
	- vm.startPrank(LP) (test/DecreaseLiquidity.t.sol#89)
	- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),INCREASE_AMOUNT_0) (test/DecreaseLiquidity.t.sol#90)
	- TransferHelper.safeApprove(address(WETH),address(particlePositionManager),INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#91)
	- (amount0Added,amount1Added) = particlePositionManager.increaseLiquidity(_tokenId,INCREASE_AMOUNT_0,INCREASE_AMOUNT_1) (test/DecreaseLiquidity.t.sol#93-97)
	- (amount0Decreased,amount1Decreased) = particlePositionManager.decreaseLiquidity(_tokenId,liquidity) (test/DecreaseLiquidity.t.sol#104-107)
	- (amount0Returned,amount1Returned) = particlePositionManager.collectLiquidity(_tokenId) (test/DecreaseLiquidity.t.sol#108)
	- assertEq(amount0Decreased,amount0Returned) (test/DecreaseLiquidity.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(amount1Decreased,amount1Returned) (test/DecreaseLiquidity.t.sol#114)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(usdcBalanceAfter - usdcBalanceBefore,amount0Returned) (test/DecreaseLiquidity.t.sol#116)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(wethBalanceAfter - wethBalanceBefore,amount1Returned) (test/DecreaseLiquidity.t.sol#117)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(amount0Added + _amount0Minted,amount0Returned,10) (test/DecreaseLiquidity.t.sol#119)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(amount1Added + _amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#120)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(amount1Added + _amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#120)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(amount1Added + _amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#120)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(amount1Added + _amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#120)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(amount1Added + _amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#120)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(amount1Added + _amount1Minted,amount1Returned,10) (test/DecreaseLiquidity.t.sol#120)
Reentrancy in MintTest.testMintNativeInRange() (test/Mint.t.sol#104-131):
	External calls:
	- (tokenId) = _mintNative(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#111-120)
		- vm.startPrank(WHALE) (test/Base.t.sol#140)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#141)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#142)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#143)
		- vm.startPrank(lp) (test/Base.t.sol#144)
		- TransferHelper.safeApprove(token0,UNI_POSITION_MANAGER,amount0) (test/Base.t.sol#145)
		- TransferHelper.safeApprove(token1,UNI_POSITION_MANAGER,amount1) (test/Base.t.sol#146)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0,lp,block.timestamp)) (test/Base.t.sol#147-161)
		- vm.stopPrank() (test/Base.t.sol#162)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
Reentrancy in MintTest.testMintNativeInRange() (test/Mint.t.sol#104-131):
	External calls:
	- (tokenId) = _mintNative(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#111-120)
		- vm.startPrank(WHALE) (test/Base.t.sol#140)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#141)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#142)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#143)
		- vm.startPrank(lp) (test/Base.t.sol#144)
		- TransferHelper.safeApprove(token0,UNI_POSITION_MANAGER,amount0) (test/Base.t.sol#145)
		- TransferHelper.safeApprove(token1,UNI_POSITION_MANAGER,amount1) (test/Base.t.sol#146)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0,lp,block.timestamp)) (test/Base.t.sol#147-161)
		- vm.stopPrank() (test/Base.t.sol#162)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(lp,address(0)) (test/Mint.t.sol#127)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,address(0)) (test/Mint.t.sol#127)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,address(0)) (test/Mint.t.sol#127)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,address(0)) (test/Mint.t.sol#127)
Reentrancy in MintTest.testMintNativeInRange() (test/Mint.t.sol#104-131):
	External calls:
	- (tokenId) = _mintNative(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#111-120)
		- vm.startPrank(WHALE) (test/Base.t.sol#140)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#141)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#142)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#143)
		- vm.startPrank(lp) (test/Base.t.sol#144)
		- TransferHelper.safeApprove(token0,UNI_POSITION_MANAGER,amount0) (test/Base.t.sol#145)
		- TransferHelper.safeApprove(token1,UNI_POSITION_MANAGER,amount1) (test/Base.t.sol#146)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0,lp,block.timestamp)) (test/Base.t.sol#147-161)
		- vm.stopPrank() (test/Base.t.sol#162)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(lp,address(0)) (test/Mint.t.sol#127)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#129)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#129)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#129)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#129)
Reentrancy in MintTest.testMintNativeInRange() (test/Mint.t.sol#104-131):
	External calls:
	- (tokenId) = _mintNative(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#111-120)
		- vm.startPrank(WHALE) (test/Base.t.sol#140)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#141)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#142)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#143)
		- vm.startPrank(lp) (test/Base.t.sol#144)
		- TransferHelper.safeApprove(token0,UNI_POSITION_MANAGER,amount0) (test/Base.t.sol#145)
		- TransferHelper.safeApprove(token1,UNI_POSITION_MANAGER,amount1) (test/Base.t.sol#146)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0,lp,block.timestamp)) (test/Base.t.sol#147-161)
		- vm.stopPrank() (test/Base.t.sol#162)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),LP) (test/Mint.t.sol#125)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(lp,address(0)) (test/Mint.t.sol#127)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(MINT_AMOUNT_0,token0BalanceAfter) (test/Mint.t.sol#129)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#130)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a > b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#295)
		- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#130)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#296)
		- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#130)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#297)
		- assertGt(MINT_AMOUNT_1,token1BalanceAfter) (test/Mint.t.sol#130)
Reentrancy in MintTest.testMintOutRangeToken0() (test/Mint.t.sol#46-73):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#53-62)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#68)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,LP) (test/Mint.t.sol#68)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,LP) (test/Mint.t.sol#68)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,LP) (test/Mint.t.sol#68)
Reentrancy in MintTest.testMintOutRangeToken0() (test/Mint.t.sol#46-73):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#53-62)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#68)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#69)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#69)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#69)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#69)
Reentrancy in MintTest.testMintOutRangeToken0() (test/Mint.t.sol#46-73):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#53-62)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#68)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#69)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token0BalanceAfter,MINT_AMOUNT_0) (test/Mint.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token0BalanceAfter,MINT_AMOUNT_0) (test/Mint.t.sol#71)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token0BalanceAfter,MINT_AMOUNT_0) (test/Mint.t.sol#71)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token0BalanceAfter,MINT_AMOUNT_0) (test/Mint.t.sol#71)
Reentrancy in MintTest.testMintOutRangeToken0() (test/Mint.t.sol#46-73):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#53-62)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#68)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#69)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token0BalanceAfter,MINT_AMOUNT_0) (test/Mint.t.sol#71)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(token1BalanceAfter,0,1000000000) (test/Mint.t.sol#72)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(token1BalanceAfter,0,1000000000) (test/Mint.t.sol#72)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(token1BalanceAfter,0,1000000000) (test/Mint.t.sol#72)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(token1BalanceAfter,0,1000000000) (test/Mint.t.sol#72)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(token1BalanceAfter,0,1000000000) (test/Mint.t.sol#72)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(token1BalanceAfter,0,1000000000) (test/Mint.t.sol#72)
Reentrancy in MintTest.testMintOutRangeToken1() (test/Mint.t.sol#75-102):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#82-91)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#97)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,LP) (test/Mint.t.sol#97)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,LP) (test/Mint.t.sol#97)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,LP) (test/Mint.t.sol#97)
Reentrancy in MintTest.testMintOutRangeToken1() (test/Mint.t.sol#75-102):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#82-91)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#97)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#98)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#98)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#98)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#98)
Reentrancy in MintTest.testMintOutRangeToken1() (test/Mint.t.sol#75-102):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#82-91)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#97)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#98)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
Reentrancy in MintTest.testMintOutRangeToken1() (test/Mint.t.sol#75-102):
	External calls:
	- (tokenId) = _mint(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#82-91)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- assertEq(lp,LP) (test/Mint.t.sol#97)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(IERC721(UNI_POSITION_MANAGER).ownerOf(tokenId),address(particlePositionManager)) (test/Mint.t.sol#98)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertApproxEqAbs(token0BalanceAfter,0,100) (test/Mint.t.sol#100)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token1BalanceAfter,MINT_AMOUNT_1) (test/Mint.t.sol#101)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token1BalanceAfter,MINT_AMOUNT_1) (test/Mint.t.sol#101)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token1BalanceAfter,MINT_AMOUNT_1) (test/Mint.t.sol#101)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token1BalanceAfter,MINT_AMOUNT_1) (test/Mint.t.sol#101)
Reentrancy in ClosePositionTest.testOpenLongCloseLiquidityAmount() (test/ClosePosition.t.sol#804-810):
	External calls:
	- _openLongPosition() (test/ClosePosition.t.sol#806)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/ClosePosition.t.sol#122-128)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- _closeLongPosition(0,true,true) (test/ClosePosition.t.sol#807)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#221)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#222-230)
		- vm.stopPrank() (test/ClosePosition.t.sol#231)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,amount0ToReturn,0) (test/ClosePosition.t.sol#193)
	- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#809)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#809)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#809)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#809)
Reentrancy in ClosePositionTest.testOpenLongThenCloseFeeCost() (test/ClosePosition.t.sol#557-575):
	External calls:
	- (amountIn,amount0ToBorrow,amount1ToBorrow,openAmountSwap) = _openLongPosition() (test/ClosePosition.t.sol#558-563)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/ClosePosition.t.sol#122-128)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- (amount0ToReturn,amount1ToReturn,closeAmountSwap) = _closeLongPosition(0,true,true) (test/ClosePosition.t.sol#564)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#221)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#222-230)
		- vm.stopPrank() (test/ClosePosition.t.sol#231)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,amount0ToReturn,0) (test/ClosePosition.t.sol#193)
	- convertedUsdcCost = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,ethCost,0) (test/ClosePosition.t.sol#573)
	- assertLt(feeCost,usdcCost + convertedUsdcCost) (test/ClosePosition.t.sol#574)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a < b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#409)
		- assertLt(feeCost,usdcCost + convertedUsdcCost) (test/ClosePosition.t.sol#574)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#410)
		- assertLt(feeCost,usdcCost + convertedUsdcCost) (test/ClosePosition.t.sol#574)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#411)
		- assertLt(feeCost,usdcCost + convertedUsdcCost) (test/ClosePosition.t.sol#574)
Reentrancy in ClosePositionTest.testOpenLongWhaleLongCloseLiquidityAmount() (test/ClosePosition.t.sol#812-817):
	External calls:
	- testOpenLongWhaleLongClose() (test/ClosePosition.t.sol#814)
		- vm.startPrank(swapper) (test/Base.t.sol#81)
		- TransferHelper.safeApprove(tokenIn,UNI_ROUTER_ADDR,amount) (test/Base.t.sol#82)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#221)
		- ISwapRouter(UNI_ROUTER_ADDR).exactInputSingle(params) (test/Base.t.sol#93)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#222-230)
		- vm.stopPrank() (test/Base.t.sol#94)
		- vm.stopPrank() (test/ClosePosition.t.sol#231)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/ClosePosition.t.sol#122-128)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,amount0ToReturn,0) (test/ClosePosition.t.sol#193)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#816)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#816)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#816)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#816)
Reentrancy in ClosePositionTest.testOpenLongWhaleShortCloseLiquidityAmount() (test/ClosePosition.t.sol#819-824):
	External calls:
	- testOpenLongWhaleShortClose() (test/ClosePosition.t.sol#821)
		- vm.startPrank(swapper) (test/Base.t.sol#81)
		- TransferHelper.safeApprove(tokenIn,UNI_ROUTER_ADDR,amount) (test/Base.t.sol#82)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#221)
		- ISwapRouter(UNI_ROUTER_ADDR).exactInputSingle(params) (test/Base.t.sol#93)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount1ToReturn,amount0ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#222-230)
		- vm.stopPrank() (test/Base.t.sol#94)
		- vm.stopPrank() (test/ClosePosition.t.sol#231)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,requiredCollateral - amount1ToBorrow,0) (test/ClosePosition.t.sol#122-128)
		- vm.startPrank(WHALE) (test/Base.t.sol#198)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#199)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,amount0ToReturn,0) (test/ClosePosition.t.sol#193)
		- vm.stopPrank() (test/Base.t.sol#200)
		- vm.startPrank(swapper) (test/Base.t.sol#202)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#203)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#204-217)
		- vm.stopPrank() (test/Base.t.sol#218)
	- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#823)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#823)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#823)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#823)
Reentrancy in OpenPositionTest.testOpenLongWithTargetToken() (test/OpenPosition.t.sol#329-351):
	External calls:
	- amountSwapped = QUOTER.quoteExactInputSingle(address(USDC),address(WETH),FEE,amount0ToBorrow,0) (test/OpenPosition.t.sol#337)
	- _directLong(SWAPPER,address(WETH),_tokenId,requiredEth - amount1ToBorrow - amountSwapped + 1000000000,amount0ToBorrow,borrowerLiquidity) (test/OpenPosition.t.sol#340-347)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(WHALE) (test/Base.t.sol#252)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#253)
		- IERC20(token0).transfer(swapper,feeFrom) (test/Base.t.sol#254)
		- vm.stopPrank() (test/Base.t.sol#255)
		- vm.startPrank(swapper) (test/Base.t.sol#257)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#258)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),feeFrom) (test/Base.t.sol#259)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#260-273)
		- vm.stopPrank() (test/Base.t.sol#274)
	- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,requiredEth / 1e6) (test/OpenPosition.t.sol#350)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,requiredEth / 1e6) (test/OpenPosition.t.sol#350)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,requiredEth / 1e6) (test/OpenPosition.t.sol#350)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,requiredEth / 1e6) (test/OpenPosition.t.sol#350)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,requiredEth / 1e6) (test/OpenPosition.t.sol#350)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(requiredEth,wethPlatformBalanceAfter,requiredEth / 1e6) (test/OpenPosition.t.sol#350)
Reentrancy in OpenPositionTest.testOpenLongWithTargetTokenOutOfRange() (test/OpenPosition.t.sol#387-390):
	External calls:
	- _setupUpperOutOfRange() (test/OpenPosition.t.sol#388)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#389)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwapped = QUOTER.quoteExactInputSingle(address(USDC),address(WETH),FEE,amount0ToBorrow,0) (test/OpenPosition.t.sol#337)
		- vm.startPrank(WHALE) (test/Base.t.sol#252)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#253)
		- IERC20(token0).transfer(swapper,feeFrom) (test/Base.t.sol#254)
		- vm.stopPrank() (test/Base.t.sol#255)
		- vm.startPrank(swapper) (test/Base.t.sol#257)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#258)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),feeFrom) (test/Base.t.sol#259)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,true,data)) (test/Base.t.sol#260-273)
		- vm.stopPrank() (test/Base.t.sol#274)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#389)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#389)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#389)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#389)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- testOpenLongWithTargetToken() (test/OpenPosition.t.sol#389)
Reentrancy in ClosePositionTest.testOpenShortCloseLiquidityAmount() (test/ClosePosition.t.sol#826-832):
	External calls:
	- _openShortPosition() (test/ClosePosition.t.sol#828)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredCollateral - amount0ToBorrow,0) (test/ClosePosition.t.sol#153-159)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- _closeShortPosition(0,true,true) (test/ClosePosition.t.sol#829)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#287)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount0ToReturn,amount1ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#288-296)
		- vm.stopPrank() (test/ClosePosition.t.sol#297)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,amount1ToReturn,0) (test/ClosePosition.t.sol#259)
	- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#831)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#831)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#831)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#831)
Reentrancy in ClosePositionTest.testOpenShortThenCloseFeeCost() (test/ClosePosition.t.sol#740-762):
	External calls:
	- (amountIn,amount0ToBorrow,amount1ToBorrow,openAmountSwap) = _openShortPosition() (test/ClosePosition.t.sol#741-746)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredCollateral - amount0ToBorrow,0) (test/ClosePosition.t.sol#153-159)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- (amount0ToReturn,amount1ToReturn,closeAmountSwap) = _closeShortPosition(0,true,true) (test/ClosePosition.t.sol#747-751)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#287)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount0ToReturn,amount1ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#288-296)
		- vm.stopPrank() (test/ClosePosition.t.sol#297)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,amount1ToReturn,0) (test/ClosePosition.t.sol#259)
	- convertedEthCost = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,usdcCost,0) (test/ClosePosition.t.sol#760)
	- assertLt(feeCost,ethCost + convertedEthCost) (test/ClosePosition.t.sol#761)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a < b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#409)
		- assertLt(feeCost,ethCost + convertedEthCost) (test/ClosePosition.t.sol#761)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#410)
		- assertLt(feeCost,ethCost + convertedEthCost) (test/ClosePosition.t.sol#761)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#411)
		- assertLt(feeCost,ethCost + convertedEthCost) (test/ClosePosition.t.sol#761)
Reentrancy in ClosePositionTest.testOpenShortWhaleLongCloseLiquidityAmount() (test/ClosePosition.t.sol#841-846):
	External calls:
	- testOpenShortWhaleLongClose() (test/ClosePosition.t.sol#843)
		- vm.startPrank(swapper) (test/Base.t.sol#81)
		- TransferHelper.safeApprove(tokenIn,UNI_ROUTER_ADDR,amount) (test/Base.t.sol#82)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#287)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount0ToReturn,amount1ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#288-296)
		- ISwapRouter(UNI_ROUTER_ADDR).exactInputSingle(params) (test/Base.t.sol#93)
		- vm.stopPrank() (test/Base.t.sol#94)
		- vm.stopPrank() (test/ClosePosition.t.sol#297)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredCollateral - amount0ToBorrow,0) (test/ClosePosition.t.sol#153-159)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,amount1ToReturn,0) (test/ClosePosition.t.sol#259)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#845)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#845)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#845)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#845)
Reentrancy in ClosePositionTest.testOpenShortWhaleShortCloseLiquidityAmount() (test/ClosePosition.t.sol#834-839):
	External calls:
	- testOpenShortWhaleShortClose() (test/ClosePosition.t.sol#836)
		- vm.startPrank(swapper) (test/Base.t.sol#81)
		- TransferHelper.safeApprove(tokenIn,UNI_ROUTER_ADDR,amount) (test/Base.t.sol#82)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(SWAPPER) (test/ClosePosition.t.sol#287)
		- particlePositionManager.closePosition(DataStruct.ClosePositionParams(uint96(lienId),amount0ToReturn,amount1ToReturn,amountSwap,data)) (test/ClosePosition.t.sol#288-296)
		- ISwapRouter(UNI_ROUTER_ADDR).exactInputSingle(params) (test/Base.t.sol#93)
		- vm.stopPrank() (test/Base.t.sol#94)
		- vm.stopPrank() (test/ClosePosition.t.sol#297)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(WETH),address(USDC),FEE,requiredCollateral - amount0ToBorrow,0) (test/ClosePosition.t.sol#153-159)
		- vm.startPrank(WHALE) (test/Base.t.sol#307)
		- IERC20(tokenFrom).transfer(swapper,amountFrom) (test/Base.t.sol#308)
		- amountSwap = QUOTER.quoteExactOutputSingle(address(USDC),address(WETH),FEE,amount1ToReturn,0) (test/ClosePosition.t.sol#259)
		- vm.stopPrank() (test/Base.t.sol#309)
		- vm.startPrank(swapper) (test/Base.t.sol#311)
		- TransferHelper.safeApprove(tokenFrom,address(particlePositionManager),amountFrom) (test/Base.t.sol#312)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,amountFrom,0,amountSwap,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#313-326)
		- vm.stopPrank() (test/Base.t.sol#327)
	- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#838)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a >= b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#352)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#838)
	- log_named_uint(  Value a,a) (lib/forge-std/lib/ds-test/src/test.sol#353)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#838)
	- log_named_uint(  Value b,b) (lib/forge-std/lib/ds-test/src/test.sol#354)
		- assertGe(liquidityAfter + liquidityAfter / BASIS_POINT,liquidityBefore) (test/ClosePosition.t.sol#838)
Reentrancy in OpenPositionTest.testOpenShortWithTargetToken() (test/OpenPosition.t.sol#353-375):
	External calls:
	- amountSwapped = QUOTER.quoteExactInputSingle(address(WETH),address(USDC),FEE,amount1ToBorrow,0) (test/OpenPosition.t.sol#361)
	- _directShort(SWAPPER,address(USDC),_tokenId,requiredUsdc - amount0ToBorrow - amountSwapped + 100,amount1ToBorrow,borrowerLiquidity) (test/OpenPosition.t.sol#364-371)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.startPrank(WHALE) (test/Base.t.sol#359)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#360)
		- IERC20(token1).transfer(swapper,feeFrom) (test/Base.t.sol#361)
		- vm.stopPrank() (test/Base.t.sol#362)
		- vm.startPrank(swapper) (test/Base.t.sol#364)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#365)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),feeFrom) (test/Base.t.sol#366)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#367-380)
		- vm.stopPrank() (test/Base.t.sol#381)
	- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,requiredUsdc / 1e6) (test/OpenPosition.t.sol#374)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,requiredUsdc / 1e6) (test/OpenPosition.t.sol#374)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,requiredUsdc / 1e6) (test/OpenPosition.t.sol#374)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,requiredUsdc / 1e6) (test/OpenPosition.t.sol#374)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,requiredUsdc / 1e6) (test/OpenPosition.t.sol#374)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- assertApproxEqAbs(requiredUsdc,usdcPlatformBalanceAfter,requiredUsdc / 1e6) (test/OpenPosition.t.sol#374)
Reentrancy in OpenPositionTest.testOpenShortWithTargetTokenOutOfRange() (test/OpenPosition.t.sol#402-405):
	External calls:
	- _setupLowerOutOfRange() (test/OpenPosition.t.sol#403)
		- vm.startPrank(WHALE) (test/Base.t.sol#107)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#108)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#109)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#110)
		- vm.startPrank(lp) (test/Base.t.sol#111)
		- TransferHelper.safeApprove(token0,address(particlePositionManager),amount0) (test/Base.t.sol#112)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),amount1) (test/Base.t.sol#113)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = particlePositionManager.mint(DataStruct.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0)) (test/Base.t.sol#114-126)
		- vm.stopPrank() (test/Base.t.sol#127)
	- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#404)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- amountSwapped = QUOTER.quoteExactInputSingle(address(WETH),address(USDC),FEE,amount1ToBorrow,0) (test/OpenPosition.t.sol#361)
		- vm.startPrank(WHALE) (test/Base.t.sol#359)
		- IERC20(tokenTo).transfer(swapper,amountTo) (test/Base.t.sol#360)
		- IERC20(token1).transfer(swapper,feeFrom) (test/Base.t.sol#361)
		- vm.stopPrank() (test/Base.t.sol#362)
		- vm.startPrank(swapper) (test/Base.t.sol#364)
		- TransferHelper.safeApprove(tokenTo,address(particlePositionManager),amountTo) (test/Base.t.sol#365)
		- TransferHelper.safeApprove(token1,address(particlePositionManager),feeFrom) (test/Base.t.sol#366)
		- particlePositionManager.openPosition(DataStruct.OpenPositionParams(tokenId,feeFrom,amountTo,amountBorrowed,liquidity,0,0,type()(uint8).max,false,data)) (test/Base.t.sol#367-380)
		- vm.stopPrank() (test/Base.t.sol#381)
	Event emitted after the call(s):
	- log(Error: a ~= b not satisfied [uint]) (lib/forge-std/src/StdAssertions.sol#109)
		- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#404)
	- log_named_uint(      Left,a) (lib/forge-std/src/StdAssertions.sol#110)
		- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#404)
	- log_named_uint(     Right,b) (lib/forge-std/src/StdAssertions.sol#111)
		- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#404)
	- log_named_uint( Max Delta,maxDelta) (lib/forge-std/src/StdAssertions.sol#112)
		- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#404)
	- log_named_uint(     Delta,delta) (lib/forge-std/src/StdAssertions.sol#113)
		- testOpenShortWithTargetToken() (test/OpenPosition.t.sol#404)
Reentrancy in OpenPositionTest.testRequiredCollateralIndependentOfPrice() (test/OpenPosition.t.sol#104-115):
	External calls:
	- assertEq(token1Amount,1051767454788208747) (test/OpenPosition.t.sol#113)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(token0Amount,1757246963) (test/OpenPosition.t.sol#114)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(token0Amount,1757246963) (test/OpenPosition.t.sol#114)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(token0Amount,1757246963) (test/OpenPosition.t.sol#114)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(token0Amount,1757246963) (test/OpenPosition.t.sol#114)
Reentrancy in MintTest.testTransferNonPositionNftNoTokenId() (test/Mint.t.sol#161-169):
	External calls:
	- nft.mint(LP,42) (test/Mint.t.sol#163)
	- vm.startPrank(LP) (test/Mint.t.sol#164)
	- IERC721(nft).safeTransferFrom(LP,address(particlePositionManager),42) (test/Mint.t.sol#165)
	- assertEq(lp,address(0)) (test/Mint.t.sol#167)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,address(0)) (test/Mint.t.sol#167)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,address(0)) (test/Mint.t.sol#167)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,address(0)) (test/Mint.t.sol#167)
Reentrancy in MintTest.testTransferPositionNft() (test/Mint.t.sol#133-159):
	External calls:
	- (tokenId) = _mintNative(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#140-149)
		- vm.startPrank(WHALE) (test/Base.t.sol#140)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#141)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#142)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#143)
		- vm.startPrank(lp) (test/Base.t.sol#144)
		- TransferHelper.safeApprove(token0,UNI_POSITION_MANAGER,amount0) (test/Base.t.sol#145)
		- TransferHelper.safeApprove(token1,UNI_POSITION_MANAGER,amount1) (test/Base.t.sol#146)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0,lp,block.timestamp)) (test/Base.t.sol#147-161)
		- vm.stopPrank() (test/Base.t.sol#162)
	- vm.startPrank(LP) (test/Mint.t.sol#151)
	- assertEq(lp,address(0)) (test/Mint.t.sol#153)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,address(0)) (test/Mint.t.sol#153)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,address(0)) (test/Mint.t.sol#153)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,address(0)) (test/Mint.t.sol#153)
Reentrancy in MintTest.testTransferPositionNft() (test/Mint.t.sol#133-159):
	External calls:
	- (tokenId) = _mintNative(LP,address(USDC),address(WETH),FEE,tickLower,tickUpper,MINT_AMOUNT_0,MINT_AMOUNT_1) (test/Mint.t.sol#140-149)
		- vm.startPrank(WHALE) (test/Base.t.sol#140)
		- IERC20(token0).transfer(lp,amount0) (test/Base.t.sol#141)
		- IERC20(token1).transfer(lp,amount1) (test/Base.t.sol#142)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Base.t.sol#143)
		- vm.startPrank(lp) (test/Base.t.sol#144)
		- TransferHelper.safeApprove(token0,UNI_POSITION_MANAGER,amount0) (test/Base.t.sol#145)
		- TransferHelper.safeApprove(token1,UNI_POSITION_MANAGER,amount1) (test/Base.t.sol#146)
		- (tokenId,liquidity,amount0Minted,amount1Minted) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(token0,token1,fee,tickLower,tickUpper,amount0,amount1,0,0,lp,block.timestamp)) (test/Base.t.sol#147-161)
		- vm.stopPrank() (test/Base.t.sol#162)
	- vm.startPrank(LP) (test/Mint.t.sol#151)
	- assertEq(lp,address(0)) (test/Mint.t.sol#153)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- IERC721(UNI_POSITION_MANAGER).safeTransferFrom(LP,address(particlePositionManager),tokenId) (test/Mint.t.sol#155)
	- assertEq(lp,LP) (test/Mint.t.sol#157)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
		- assertEq(lp,LP) (test/Mint.t.sol#157)
	- log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
		- assertEq(lp,LP) (test/Mint.t.sol#157)
	- log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
		- assertEq(lp,LP) (test/Mint.t.sol#157)
Reentrancy in SwapTest.testTransientSwapAmount() (test/Swap.t.sol#79-85):
	External calls:
	- (amount0,amount1) = _swap() (test/Swap.t.sol#80)
		- vm.startPrank(WHALE) (test/Swap.t.sol#57)
		- USDC.transfer(SWAPPER,USDC_AMOUNT_IN) (test/Swap.t.sol#58)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Swap.t.sol#59)
		- vm.startPrank(SWAPPER) (test/Swap.t.sol#73)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),USDC_AMOUNT_IN) (test/Swap.t.sol#74)
		- (amount0,amount1) = particlePositionManager.swap(address(USDC),address(WETH),USDC_AMOUNT_IN,0,data) (test/Swap.t.sol#75)
		- vm.stopPrank() (test/Swap.t.sol#76)
	- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
Reentrancy in SwapTest.testTransientSwapAmount() (test/Swap.t.sol#79-85):
	External calls:
	- (amount0,amount1) = _swap() (test/Swap.t.sol#80)
		- vm.startPrank(WHALE) (test/Swap.t.sol#57)
		- USDC.transfer(SWAPPER,USDC_AMOUNT_IN) (test/Swap.t.sol#58)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Swap.t.sol#59)
		- vm.startPrank(SWAPPER) (test/Swap.t.sol#73)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),USDC_AMOUNT_IN) (test/Swap.t.sol#74)
		- (amount0,amount1) = particlePositionManager.swap(address(USDC),address(WETH),USDC_AMOUNT_IN,0,data) (test/Swap.t.sol#75)
		- vm.stopPrank() (test/Swap.t.sol#76)
	- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(WETH.balanceOf(SWAPPER),amount1) (test/Swap.t.sol#82)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(WETH.balanceOf(SWAPPER),amount1) (test/Swap.t.sol#82)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(WETH.balanceOf(SWAPPER),amount1) (test/Swap.t.sol#82)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(WETH.balanceOf(SWAPPER),amount1) (test/Swap.t.sol#82)
Reentrancy in SwapTest.testTransientSwapAmount() (test/Swap.t.sol#79-85):
	External calls:
	- (amount0,amount1) = _swap() (test/Swap.t.sol#80)
		- vm.startPrank(WHALE) (test/Swap.t.sol#57)
		- USDC.transfer(SWAPPER,USDC_AMOUNT_IN) (test/Swap.t.sol#58)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Swap.t.sol#59)
		- vm.startPrank(SWAPPER) (test/Swap.t.sol#73)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),USDC_AMOUNT_IN) (test/Swap.t.sol#74)
		- (amount0,amount1) = particlePositionManager.swap(address(USDC),address(WETH),USDC_AMOUNT_IN,0,data) (test/Swap.t.sol#75)
		- vm.stopPrank() (test/Swap.t.sol#76)
	- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(WETH.balanceOf(SWAPPER),amount1) (test/Swap.t.sol#82)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(USDC.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#83)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(USDC.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#83)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(USDC.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#83)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(USDC.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#83)
Reentrancy in SwapTest.testTransientSwapAmount() (test/Swap.t.sol#79-85):
	External calls:
	- (amount0,amount1) = _swap() (test/Swap.t.sol#80)
		- vm.startPrank(WHALE) (test/Swap.t.sol#57)
		- USDC.transfer(SWAPPER,USDC_AMOUNT_IN) (test/Swap.t.sol#58)
		- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (lib/v3-periphery/contracts/libraries/TransferHelper.sol#48)
		- vm.stopPrank() (test/Swap.t.sol#59)
		- vm.startPrank(SWAPPER) (test/Swap.t.sol#73)
		- TransferHelper.safeApprove(address(USDC),address(particlePositionManager),USDC_AMOUNT_IN) (test/Swap.t.sol#74)
		- (amount0,amount1) = particlePositionManager.swap(address(USDC),address(WETH),USDC_AMOUNT_IN,0,data) (test/Swap.t.sol#75)
		- vm.stopPrank() (test/Swap.t.sol#76)
	- assertEq(USDC.balanceOf(SWAPPER),USDC_AMOUNT_IN - amount0) (test/Swap.t.sol#81)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(WETH.balanceOf(SWAPPER),amount1) (test/Swap.t.sol#82)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(USDC.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#83)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	- assertEq(WETH.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#84)
		- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
	Event emitted after the call(s):
	- log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
		- assertEq(WETH.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#84)
	- log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
		- assertEq(WETH.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#84)
	- log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
		- assertEq(WETH.balanceOf(address(particlePositionManager)),0) (test/Swap.t.sol#84)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Slither:../2023-12-particle/. analyzed (104 contracts with 1 detectors), 94 result(s) found
